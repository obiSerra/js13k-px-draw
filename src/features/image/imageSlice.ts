import { createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { CANVAS_SIZE_H, CANVAS_SIZE_L } from "../constants";

export type ImagePixels = (string | null)[][];

export interface CounterState {
  value: ImagePixels;
  canvasSize: { l: number; h: number };
  status: "idle" | "loading" | "failed";
}

const generateEmpty = (sizeL: number, sizeH: number) => {
  const startingVal: ImagePixels = [];
  for (let i = 0; i < sizeH; i++) {
    const row: (string | null)[] = [];
    for (let j = 0; j < sizeL; j++) {
      row.push(null);
    }
    startingVal.push(row);
  }
  return startingVal;
};

const initImage = (sizeL: number, sizeH: number) => {
  const fromStorage = localStorage.getItem("image");
  if (fromStorage) return JSON.parse(fromStorage);
  return generateEmpty(sizeL, sizeH);
};
const initialState: CounterState = {
  value: initImage(CANVAS_SIZE_L, CANVAS_SIZE_H),
  status: "idle",
  canvasSize: { l: CANVAS_SIZE_L, h: CANVAS_SIZE_H },
};

export const imageSlice = createSlice({
  name: "image",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    colorPixel: (state, data) => {
      const { x, y, color } = data.payload;
      state.value[x][y] = color;
    },
    save: state => {
      localStorage.setItem("image", JSON.stringify(state.value));
    },
    load: (state, data) => {
      const value = data.payload;
      state.value = value;
    },
    clear: state => {
      localStorage.removeItem("image");
      state.value = initImage(state.canvasSize.l, state.canvasSize.h);
    },
    changeSize: (state, data) => {
      const { l, h } = data.payload;
      state.value = generateEmpty(l, h);
      state.canvasSize = { l, h };
    }
    // decrement: state => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { colorPixel, save, clear, load, changeSize } = imageSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectImage = (state: RootState) => state.image.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       // dispatch(incrementByAmount(amount));
//     }
//   };

export default imageSlice.reducer;
